#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build OpenWrt

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

env:
  REPO_URL: https://github.com/padavanonly/immortalwrt-mt798x-6.6
  REPO_BRANCH: openwrt-24.10-6.6
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        # 深度清理冗余软件（释放根目录空间）
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo apt-get purge -y snapd firefox libreoffice* thunderbird  # 删除大型预装软件
        sudo apt-get autoremove -y --purge
        sudo apt-get clean
        # 清理临时文件和apt缓存
        sudo rm -rf /var/cache/apt/archives/* /var/tmp/* /tmp/*
        # 修复/tmp权限（解决临时文件创建失败）
        sudo chmod 1777 /tmp
        # 安装编译依赖
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)
        # 配置时区
        sudo timedatectl set-timezone "$TZ"
        # 检查清理后空间
        echo "=== Disk space after environment init ==="
        df -hT / /tmp
        # 创建工作目录并授权
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD  # 查看工作目录空间
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8  # 多线程下载依赖包
        # 删除空的下载文件（避免编译报错）
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Pre-compile space check
      id: space_check
      run: |
        # 检查根目录空闲空间（至少需15GB，避免编译中空间不足）
        ROOT_FREE=$(df -m / | awk 'NR==2 {print $4}')
        REQUIRED_FREE=15360  # 15GB = 15360MB
        echo "Root directory free space: ${ROOT_FREE}MB (required: ${REQUIRED_FREE}MB)"
        if [ $ROOT_FREE -lt $REQUIRED_FREE ]; then
          echo "Warning: Insufficient space! Trying final cleanup..."
          # 最后清理下载目录冗余文件
          sudo rm -rf /workdir/openwrt/dl/* 2>/dev/null
          ROOT_FREE_AFTER=$(df -m / | awk 'NR==2 {print $4}')
          echo "Free space after final cleanup: ${ROOT_FREE_AFTER}MB"
          if [ $ROOT_FREE_AFTER -lt $REQUIRED_FREE ]; then
            echo "Error: Still insufficient space! Abort compile."
            exit 1
          fi
        fi

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        # 计算编译线程（CPU核心数-1，减少临时文件峰值占用）
        THREADS=$(( $(nproc) - 1 ))
        [ $THREADS -lt 1 ] && THREADS=1  # 确保至少1线程
        echo -e "${THREADS} thread compile (optimized for space)"
        # 编译逻辑：降线程→单线程→详细日志，失败时清理残留
        COMPILE_SUCCESS=0
        make -j$THREADS || (make clean && make -j1) || (make clean && make -j1 V=s)
        if [ $? -eq 0 ]; then
          COMPILE_SUCCESS=1
          echo "status=success" >> $GITHUB_OUTPUT
          # 提取设备型号（避免空值）
          DEVICE=$(grep -m1 '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/')
          [ -n "$DEVICE" ] && echo "DEVICE_NAME=_${DEVICE}" >> $GITHUB_ENV || echo "DEVICE_NAME=_unknown" >> $GITHUB_ENV
          # 生成时间戳
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          # 打印失败时空间状态，便于排查
          echo "=== Disk space after compile failure ==="
          df -hT /
          exit 1
        fi

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    # 整理编译好的固件
    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled() && steps.compile.outputs.status == 'success'
      run: |
        cd openwrt/bin/targets/*/*
        # 删除无用文件，减小上传体积
        rm -rf packages *.buildinfo *.manifest *.json *bl2.bin
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Upload firmware to cowtransfer
      id: cowtransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
        echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
        echo "url=$(cat cowtransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT

    - name: Upload firmware to WeTransfer
      id: wetransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
        echo "url=$(cat wetransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled() && steps.compile.outputs.status == 'success'
      run: |
        # 生成带设备型号和时间的标签
        RELEASE_TAG=$(date +"%Y.%m.%d-%H%M")-immortalwrt24.10-6.6${{ env.DEVICE_NAME }}
        echo "release_tag=${RELEASE_TAG}" >> $GITHUB_OUTPUT
        # 生成发布说明
        touch release.txt
        echo "cmcc_rax3000m-237大功率固件" >> release.txt
        echo "后台地址：192.168.6.1" >> release.txt
        echo "登录账号：root" >> release.txt
        echo "登录密码：无" >> release.txt
        echo "默认主题：Argon" >> release.txt
        echo "集成插件：aria2、openlist2、diskman、lucky、ksmb、hd-idle、autoreboot、mtwifi-cfg" >> release.txt
        echo "编译源码：https://github.com/padavanonly/immortalwrt-mt798x-6.6" >> release.txt
        echo "编译时间：$(date +"%Y-%m-%d %H:%M:%S %Z")" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 3
