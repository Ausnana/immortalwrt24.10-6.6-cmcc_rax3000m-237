#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: 构建OpenWrt固件

permissions:
  contents: write
  actions: write

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

env:
  REPO_URL: https://github.com/padavanonly/immortalwrt-mt798x-6.6
  REPO_BRANCH: openwrt-24.10-6.6
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: 检出代码
      uses: actions/checkout@main

    - name: 初始化环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        # 深度清理冗余软件，释放空间
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo apt-get purge -y snapd firefox libreoffice* thunderbird
        sudo rm -rf /var/cache/apt/archives/* /var/tmp/* /tmp/*
        # 新增：安装 geoview 依赖的开发库
        sudo -E apt-get -qq install libcurl4-openssl-dev libjson-c-dev zlib1g-dev
        # 重定向临时目录到/workdir（解决/tmp空间不足）
        sudo mkdir -p /workdir/tmp && sudo chmod 1777 /workdir/tmp
        export TMPDIR=/workdir/tmp && echo "TMPDIR=/workdir/tmp" >> $GITHUB_ENV
        # 修复1：补充 Python3 Host 编译必需依赖（关键！之前可能缺失）
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install \
          python3 python3-dev python3-distutils python3-pip python3-ply python3-docutils \
          python3-pyelftools python3-setuptools  # 这些是host编译python3的核心依赖
        # 安装原有其他依赖
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        echo "=== Disk space after init ==="
        df -hT / /tmp /workdir/tmp
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: 克隆源码
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    # 工具链缓存（排除Python3相关缓存，避免旧缓存干扰）
    - name: 缓存工具链与核心库
      uses: actions/cache@v3
      with:
        path: |
          /workdir/openwrt/staging_dir/toolchain-*
          /workdir/openwrt/staging_dir/target-*/usr/lib
          !/workdir/openwrt/staging_dir/hostpkg/*python3*  # 不缓存Python3 host包，避免冲突
        key: ${{ runner.os }}-openwrt-cache-${{ env.REPO_BRANCH }}-${{ hashFiles('.config', 'diy-*.sh') }}
        restore-keys: |
          ${{ runner.os }}-openwrt-cache-${{ env.REPO_BRANCH }}-
          ${{ runner.os }}-openwrt-cache-

    - name: 加载自定义Feeds
      run: |
        [ -e "$FEEDS_CONF" ] && mv "$FEEDS_CONF" openwrt/feeds.conf.default
        chmod +x "$DIY_P1_SH"
        cd openwrt
        "$GITHUB_WORKSPACE/$DIY_P1_SH"

    - name: 更新Feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: 安装Feeds
      run: |
        cd openwrt && ./scripts/feeds install -a
        # 修复2：单独安装Python3包（确保不被Feeds优先级覆盖或遗漏）
        cd openwrt && ./scripts/feeds install python3

    - name: 加载自定义配置
      run: |
        [ -d "files" ] && mv "files" openwrt/files
        [ -e "$CONFIG_FILE" ] && mv "$CONFIG_FILE" openwrt/.config
        chmod +x "$DIY_P2_SH"
        cd openwrt
        "$GITHUB_WORKSPACE/$DIY_P2_SH"

    # SSH连接（便于调试Python3编译问题）
    - name: SSH连接到Actions环境
      uses: P3TERX/ssh2actions@v1.0.0
      if: fromJSON(github.event.inputs.ssh || 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: 下载软件包
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8 2>&1 | tee download.log
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        # 校验下载包（不限制格式）
        if ! ls dl/* 2>/dev/null; then
          echo "Error: Missing downloaded packages!" && exit 1
        fi

    # 编译前空间检查
    - name: 编译前空间检查
      id: space_check
      run: |
        ROOT_FREE=$(df -m / | awk 'NR==2 {print $4}')
        REQUIRED_FREE=15360
        echo "Root free space: ${ROOT_FREE}MB (required: ${REQUIRED_FREE}MB)"
        if [ "$ROOT_FREE" -lt "$REQUIRED_FREE" ]; then
          echo "Warning: Insufficient space! Cleaning dl directory..."
          sudo rm -rf /workdir/openwrt/dl/* 2>/dev/null
          ROOT_FREE_AFTER=$(df -m / | awk 'NR==2 {print $4}')
          echo "Free space after cleanup: ${ROOT_FREE_AFTER}MB"
          [ "$ROOT_FREE_AFTER" -lt "$REQUIRED_FREE" ] && { echo "Error: Still no space!"; exit 1; }
        fi
        # 后台空间监控
        echo "Start background space monitoring..."
        while true; do
          ROOT_FREE=$(df -m / | awk 'NR==2 {print $4}')
          [ "$ROOT_FREE" -lt 10240 ] && { echo "Low space! Cleaning dl..."; sudo rm -rf /workdir/openwrt/dl/* 2>/dev/null; }
          sleep 30
        done &
        echo "SPACE_MONITOR_PID=$!" >> $GITHUB_ENV

    - name: 编译固件（核心修复：优化Python3 Host编译）
      id: compile
      run: |
        cd openwrt
        # 按内存适配线程数（16GB内存用3线程，合理）
        THREADS=$(( $(nproc) - 1 ))
        [ "$THREADS" -lt 1 ] && THREADS=1
        MEM_TOTAL=$(free -m | awk '/Mem:/ {print $2}')
        [ "$MEM_TOTAL" -lt 8192 ] && THREADS=1
        echo -e "${THREADS} thread compile (adapted to ${MEM_TOTAL}MB memory)"
        
        # 修复3：前置编译Binutils（解决工具链依赖问题，单线程避免冲突）
        echo "=== First compile Binutils (toolchain) with single thread ==="
        make -j1 toolchain/binutils/compile V=s 2>&1 | tee binutils-compile.log
        if [ $? -ne 0 ]; then
          echo "Error: Binutils compile failed! Check binutils-compile.log"
          cat binutils-compile.log
          exit 1
        fi
        
        # 修复4：Python3 Host编译路径兼容（先试原路径，失败用备选路径）
        echo "=== First compile Python3 [host] with single thread ==="
        PYTHON_HOST_TARGET1="package/feeds/packages/python3/host-compile"
        PYTHON_HOST_TARGET2="package/python3/host/compile"  # 备选路径（适配多数OpenWRT版本）
        if make -j1 $PYTHON_HOST_TARGET1 V=s 2>&1 | tee python3-host-compile.log; then
          echo "Python3 Host compiled with target: $PYTHON_HOST_TARGET1"
        else
          echo "Retry with alternative target: $PYTHON_HOST_TARGET2"
          if ! make -j1 $PYTHON_HOST_TARGET2 V=s 2>&1 | tee -a python3-host-compile.log; then
            echo "Error: Python3 [host] compile failed! Check python3-host-compile.log"
            cat python3-host-compile.log
            exit 1
          fi
        fi
        
        # 修复3：剩余部分正常多线程编译，保存完整日志
        COMPILE_LOG="compile.log"
        make -j"$THREADS" 2>&1 | tee -a "$COMPILE_LOG" || {
          echo "Main compile failed, retry with 1 thread..."
          make -j1 2>&1 | tee -a "$COMPILE_LOG" || {
            echo "Retry failed, compile with verbose log..."
            make -j1 V=s 2>&1 | tee -a "$COMPILE_LOG"
          }
        }
        
        # 状态判断
        if [ $? -ne 0 ]; then
          echo "=== Disk space after compile failure ==="
          df -hT /
          exit 1
        fi
        echo "status=success" >> $GITHUB_OUTPUT
        # 提取设备名
        DEVICE=$(grep -m1 '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/')
        [ -n "$DEVICE" ] && echo "DEVICE_NAME=_${DEVICE}" >> $GITHUB_ENV || echo "DEVICE_NAME=_unknown" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        # 终止后台监控
        kill -9 "${{ env.SPACE_MONITOR_PID }}" 2>/dev/null

    # 编译失败上传日志（新增Binutils日志，便于排查）
    - name: （编译失败时）上传编译日志
      uses: actions/upload-artifact@main
      if: failure() && !cancelled()
      with:
        name: compile-log-${{ env.FILE_DATE }}
        path:
          /workdir/openwrt/compile.log
          /workdir/openwrt/download.log
          /workdir/openwrt/python3-host-compile.log
          /workdir/openwrt/binutils-compile.log  # 新增Binutils日志
        retention-days: 3

    # 以下步骤完全保留原样，无修改
    - name: 检查空间使用情况
      if: (!cancelled())
      run: df -hT

    - name: 上传bin目录
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin
        retention-days: 3

    # 整理编译好的固件（不限制格式）
    - name: 整理固件文件
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/mediatek/filogic
        echo "=== Firmware directory contents (before cleanup) ==="
        ls -lha
        # 仅清理明确无用文件
        rm -rf packages *.buildinfo *.manifest *.json *.md5sum *.sha256sum */debug 2>/dev/null
        # 检查目录非空
        if [ -z "$(ls -A . 2>/dev/null)" ]; then
          echo "Error: No firmware files left after cleanup!"
          ls -lha
          exit 1
        fi
        echo "=== Firmware directory contents (after cleanup) ==="
        ls -lha
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 上传固件目录
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}/*
        retention-days: 3

    - name: 上传固件到奶牛快传
      id: cowtransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress "${FIRMWARE}/*" 2>&1 | tee cowtransfer.log
        echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
        echo "url=$(cat cowtransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT

    - name: 上传固件到WeTransfer
      id: wetransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress "${FIRMWARE}/*" 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
        echo "url=$(cat wetransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT

    - name: 生成发布标签
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        COMMIT_HASH=$(echo ${{ github.sha }} | cut -c1-8)
        release_tag=$(date +"%Y.%m.%d-%H%M-immortalwrt24.10-6.6${{ env.DEVICE_NAME }}-$COMMIT_HASH")
        echo "release_tag=${release_tag}" >> $GITHUB_OUTPUT
        touch release.txt
        echo "### cmcc_rax3000m-237 大功率固件" >> release.txt
        echo "- 后台地址：192.168.6.1" >> release.txt
        echo "- 登录账号：root" >> release.txt
        echo "- 登录密码：无" >> release.txt
        echo "- 默认主题：Argon" >> release.txt
        echo "- 集成插件：aria2、openlist2、diskman、lucky、ksmb、hd-idle、autoreboot、mtwifi-cfg" >> release.txt
        echo "- 编译源码：${{ env.REPO_URL }} (分支：${{ env.REPO_BRANCH }})" >> release.txt
        echo "- 编译Commit：${{ github.sha }}（前8位：${COMMIT_HASH}）" >> release.txt
        echo "- 编译生成固件文件（自动适配所有格式）：" >> release.txt
        ls -1 "${FIRMWARE}"/* | xargs -n1 basename | sed 's/^/- /' >> release.txt
        echo "- 编译时间：$(date +"%Y-%m-%d %H:%M:%S %Z")" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 上传固件到发布页
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*
        draft: false
        prerelease: false
      timeout-minutes: 5

    - name: 删除工作流运行记录
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 3
