#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build OpenWrt

# 修复1：显式声明权限，解决403权限不足（创建Release需要contents:write）
permissions:
  contents: write  # 授予创建/上传Release的权限
  actions: write   # 辅助删除旧工作流，避免冲突

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

env:
  REPO_URL: https://github.com/padavanonly/immortalwrt-mt798x-6.6
  REPO_BRANCH: openwrt-24.10-6.6
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        # 深度清理冗余软件，释放空间
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo apt-get purge -y snapd firefox libreoffice* thunderbird
        sudo rm -rf /var/cache/apt/archives/* /var/tmp/* /tmp/*
        # 重定向临时目录到/workdir（解决/tmp空间不足）
        sudo mkdir -p /workdir/tmp && sudo chmod 1777 /workdir/tmp
        export TMPDIR=/workdir/tmp && echo "TMPDIR=/workdir/tmp" >> $GITHUB_ENV
        # 原逻辑保留
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        echo "=== Disk space after init ==="
        df -hT / /tmp /workdir/tmp
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    # 工具链缓存
    - name: Cache toolchain & core libs
      uses: actions/cache@v3
      with:
        path: |
          /workdir/openwrt/staging_dir/toolchain-*
          /workdir/openwrt/staging_dir/target-*/usr/lib
        key: ${{ runner.os }}-openwrt-cache-${{ env.REPO_BRANCH }}-${{ hashFiles('.config', 'diy-*.sh') }}
        restore-keys: |
          ${{ runner.os }}-openwrt-cache-${{ env.REPO_BRANCH }}-
          ${{ runner.os }}-openwrt-cache-

    - name: Load custom feeds
      run: |
        [ -e "$FEEDS_CONF" ] && mv "$FEEDS_CONF" openwrt/feeds.conf.default
        chmod +x "$DIY_P1_SH"
        cd openwrt
        "$GITHUB_WORKSPACE/$DIY_P1_SH"

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -d "files" ] && mv "files" openwrt/files
        [ -e "$CONFIG_FILE" ] && mv "$CONFIG_FILE" openwrt/.config
        chmod +x "$DIY_P2_SH"
        cd openwrt
        "$GITHUB_WORKSPACE/$DIY_P2_SH"

    # SSH条件判断优化
    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: fromJSON(github.event.inputs.ssh || 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8 2>&1 | tee download.log
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        # 校验下载包
        if ls dl/*.tar.* 2>/dev/null; then
          echo "All packages downloaded successfully"
        else
          echo "Error: Missing downloaded packages!" && exit 1
        fi

    # 编译前空间检查
    - name: Pre-compile space check
      id: space_check
      run: |
        ROOT_FREE=$(df -m / | awk 'NR==2 {print $4}')
        REQUIRED_FREE=15360
        echo "Root free space: ${ROOT_FREE}MB (required: ${REQUIRED_FREE}MB)"
        if [ "$ROOT_FREE" -lt "$REQUIRED_FREE" ]; then
          echo "Warning: Insufficient space! Cleaning dl directory..."
          sudo rm -rf /workdir/openwrt/dl/* 2>/dev/null
          ROOT_FREE_AFTER=$(df -m / | awk 'NR==2 {print $4}')
          echo "Free space after cleanup: ${ROOT_FREE_AFTER}MB"
          [ "$ROOT_FREE_AFTER" -lt "$REQUIRED_FREE" ] && { echo "Error: Still no space!"; exit 1; }
        fi
        # 后台空间监控
        echo "Start background space monitoring..."
        while true; do
          ROOT_FREE=$(df -m / | awk 'NR==2 {print $4}')
          [ "$ROOT_FREE" -lt 10240 ] && { echo "Low space! Cleaning dl..."; sudo rm -rf /workdir/openwrt/dl/* 2>/dev/null; }
          sleep 30
        done &
        echo "SPACE_MONITOR_PID=$!" >> $GITHUB_ENV

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        # 按内存适配线程数
        THREADS=$(( $(nproc) - 1 ))
        [ "$THREADS" -lt 1 ] && THREADS=1
        MEM_TOTAL=$(free -m | awk '/Mem:/ {print $2}')
        [ "$MEM_TOTAL" -lt 8192 ] && THREADS=1
        echo -e "${THREADS} thread compile (adapted to ${MEM_TOTAL}MB memory)"
        COMPILE_LOG="compile.log"
        make -j"$THREADS" 2>&1 | tee "$COMPILE_LOG" || make -j1 2>&1 | tee -a "$COMPILE_LOG" || make -j1 V=s 2>&1 | tee -a "$COMPILE_LOG"
        if [ $? -ne 0 ]; then
          echo "=== Disk space after compile failure ==="
          df -hT /
          exit 1
        fi
        echo "status=success" >> $GITHUB_OUTPUT
        # 提取设备名（确保匹配实际固件目录）
        DEVICE=$(grep -m1 '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/')
        [ -n "$DEVICE" ] && echo "DEVICE_NAME=_${DEVICE}" >> $GITHUB_ENV || echo "DEVICE_NAME=_unknown" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        # 终止后台监控
        kill -9 "${{ env.SPACE_MONITOR_PID }}" 2>/dev/null

    # 编译失败上传日志
    - name: Upload compile log (on failure)
      uses: actions/upload-artifact@main
      if: failure() && !cancelled()
      with:
        name: compile-log-${{ env.FILE_DATE }}
        path:
          /workdir/openwrt/compile.log
          /workdir/openwrt/download.log
        retention-days: 3

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin
        retention-days: 3

    # 整理编译好的固件（修复2：确认固件路径，避免误删）
    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        # 进入固件目录（mediatek/filogic，适配MT798x芯片）
        cd openwrt/bin/targets/mediatek/filogic
        # 打印目录内容，确认固件存在（便于调试路径问题）
        echo "=== Firmware directory contents ==="
        ls -lha
        # 清理无用文件，保留核心固件（.bin文件）
        rm -rf packages *.buildinfo *.manifest *.json *bl2.bin */debug 2>/dev/null
        # 确认固件文件存在，否则报错
        if ! ls *.bin 2>/dev/null; then
          echo "Error: No firmware .bin files found!"
          ls -lha  # 再次打印目录，排查文件位置
          exit 1
        fi
        # 设置FIRMWARE变量为当前目录（确保后续上传能找到）
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}/*.bin  # 明确上传.bin固件，避免路径模糊
        retention-days: 3

    - name: Upload firmware to cowtransfer
      id: cowtransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress "${FIRMWARE}/*.bin" 2>&1 | tee cowtransfer.log
        echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
        echo "url=$(cat cowtransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT

    - name: Upload firmware to WeTransfer
      id: wetransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress "${FIRMWARE}/*.bin" 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
        echo "url=$(cat wetransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        # 用Shell命令截取SHA前8位（兼容Actions语法）
        COMMIT_HASH=$(echo ${{ github.sha }} | cut -c1-8)
        # 生成唯一Tag（含设备名+SHA，避免重复）
        release_tag=$(date +"%Y.%m.%d-%H%M-immortalwrt24.10-6.6${{ env.DEVICE_NAME }}-$COMMIT_HASH")
        echo "release_tag=${release_tag}" >> $GITHUB_OUTPUT
        # 生成详细发布说明
        touch release.txt
        echo "### cmcc_rax3000m-237 大功率固件" >> release.txt
        echo "- 后台地址：192.168.6.1" >> release.txt
        echo "- 登录账号：root" >> release.txt
        echo "- 登录密码：无" >> release.txt
        echo "- 默认主题：Argon" >> release.txt
        echo "- 集成插件：aria2、openlist2、diskman、lucky、ksmb、hd-idle、autoreboot、mtwifi-cfg" >> release.txt
        echo "- 编译源码：${{ env.REPO_URL }} (分支：${{ env.REPO_BRANCH }})" >> release.txt
        echo "- 编译Commit：${{ github.sha }}（前8位：${COMMIT_HASH}）" >> release.txt
        echo "- 固件文件：$(ls ${FIRMWARE}/*.bin | xargs -n1 basename)" >> release.txt  # 列出固件文件名
        echo "- 编译时间：$(date +"%Y-%m-%d %H:%M:%S %Z")" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    # 修复3：明确上传.bin文件，避免路径匹配失败；添加重试机制与错误提示
    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*.bin  # 精确匹配.bin固件，替代模糊的/*
        draft: false  # 不创建草稿，直接发布
        prerelease: false
      timeout-minutes: 5  # 超时时间5分钟，避免无限等待
      continue-on-error: false  # 失败时终止，便于排查

    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 3
