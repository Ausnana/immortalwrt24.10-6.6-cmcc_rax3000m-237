name: 克隆源码（分支验证+延长超时+详细日志）
  working-directory: /workdir
  run: |
    # 1. 校验/workdir写入权限
    if [ ! -w "$PWD" ]; then
      echo "Error: /workdir目录无写入权限！当前权限：$(ls -ld $PWD)"
      exit 1
    fi

    # 2. 校验磁盘空间（至少20GB）
    WORKDIR_FREE=$(df -m $PWD | awk 'NR==2 {print $4}')
    REQUIRED_FREE=20480
    if [ "$WORKDIR_FREE" -lt "$REQUIRED_FREE" ]; then
      echo "Error: /workdir空间不足！剩余：${WORKDIR_FREE}MB，需至少：${REQUIRED_FREE}MB"
      df -hT $PWD
      exit 1
    fi

    # 3. 验证目标分支是否存在（避免分支名错误）
    echo "=== 验证目标分支是否存在 ==="
    if ! git ls-remote --exit-code --heads $REPO_URL $REPO_BRANCH >/dev/null 2>&1; then
      echo "Error: 目标分支不存在！仓库：$REPO_URL，分支：$REPO_BRANCH"
      echo "可用分支列表（前10个）："
      git ls-remote --heads $REPO_URL | head -10 | awk '{print $2}' | sed 's/refs\/heads\///'
      exit 1
    fi
    echo "目标分支存在，继续克隆..."

    # 4. 打印克隆参数+环境信息（便于调试）
    echo "=== 克隆配置 ==="
    echo "仓库地址: $REPO_URL"
    echo "分支: $REPO_BRANCH"
    echo "目标目录: $PWD/openwrt"
    echo "Git版本: $(git --version)"
    echo "网络信息: $(ip addr | grep -E 'inet (10\.|172\.1[6-9]\.|172\.2[0-9]\.|172\.3[0-1]\.|192\.168\.)' | head -1)"

    # 5. 清理残留目录（避免冲突）
    rm -rf openwrt

    # 6. 延长超时到60秒+浅克隆+详细日志（3次重试）【仅此处修改：30→60，加--depth 1】
    CLONE_SUCCESS=0
    for i in {1..3}; do
      echo -e "\n=== 第$i次克隆尝试（60秒超时，详细日志） ==="
      timeout 60 git clone -v --depth 1 $REPO_URL -b $REPO_BRANCH openwrt  # 核心修改点
      EXIT_CODE=$?

      # 修正错误码判断：确认目录存在且非空
      if [ $EXIT_CODE -eq 0 ]; then
        if [ -d "openwrt" ] && [ "$(ls -A openwrt 2>/dev/null)" ]; then
          echo "第$i次克隆成功！目录大小：$(du -sh openwrt | awk '{print $1}')"
          CLONE_SUCCESS=1
          break
        else
          echo "警告：Git返回0，但openwrt目录为空/不存在！"
          ls -ld openwrt 2>/dev/null
          rm -rf openwrt
          EXIT_CODE=1
        fi
      elif [ $EXIT_CODE -eq 124 ]; then
        echo "第$i次克隆超时（超过60秒）"
      else
        echo "第$i次克隆失败（Git错误码：$EXIT_CODE）"
      fi

      # 重试间隔（保持不变）
      if [ $i -lt 3 ]; then
        echo "5秒后进行第$((i+1))次尝试..."
        sleep 5
      fi
    done

    # 7. 最终校验克隆结果（保持不变）
    if [ $CLONE_SUCCESS -ne 1 ]; then
      echo -e "\nError: 3次克隆均失败！可能原因："
      echo "1. 网络不稳定（GitHub Actions网络波动）"
      echo "2. 仓库分支内容异常（手动访问 $REPO_URL/tree/$REPO_BRANCH 确认）"
      echo "3. 超时不足（可将60秒改为90秒）"  # 注释同步更新
      exit 1
    fi

    # 8. 校验源码完整性（核心文件存在性）（保持不变）
    echo -e "\n=== 校验源码完整性 ==="
    KEY_FILES="Makefile scripts/feeds defconfig include"
    for file in $KEY_FILES; do
      if [ ! -e "openwrt/$file" ]; then
        echo "Error: 源码不完整！缺失关键文件：openwrt/$file"
        ls -l openwrt/
        exit 1
      fi
    done
    echo "源码完整性验证通过！"

    # 9. 创建符号链接并验证（保持不变）
    ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
    if [ ! -L "$GITHUB_WORKSPACE/openwrt" ] || [ ! -d "$GITHUB_WORKSPACE/openwrt" ]; then
      echo "Error: 符号链接创建失败！"
      echo "链接状态: $(ls -l $GITHUB_WORKSPACE/openwrt 2>/dev/null)"
      exit 1
    fi

    # 克隆完成日志（保持不变）
    echo -e "\n=== 克隆完成 ==="
    echo "openwrt实际路径: $(realpath openwrt)"
    echo "符号链接路径: $(realpath $GITHUB_WORKSPACE/openwrt)"
    df -hT $PWD/openwrt
