#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build OpenWrt

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

env:
  REPO_URL: https://github.com/padavanonly/immortalwrt-mt798x-6.6
  REPO_BRANCH: openwrt-24.10-6.6
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        # 1. 修复：确保目录创建和权限正确（避免sudo遗漏）
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo apt-get purge -y snapd firefox libreoffice* thunderbird
        sudo apt-get autoremove -y --purge
        sudo apt-get clean
        sudo rm -rf /var/cache/apt/archives/* /var/tmp/* /tmp/*
        # 临时目录重定向（确保权限生效）
        sudo mkdir -p /workdir/tmp
        sudo chmod 1777 /workdir/tmp
        export TMPDIR=/workdir/tmp && echo "TMPDIR=/workdir/tmp" >> $GITHUB_ENV
        # 原逻辑继续
        sudo chmod 1777 /tmp
        sudo -E apt-get -qq update
        # 2. 修复：避免外部链接依赖失效，直接列出核心依赖（git.io链接可能不稳定）
        sudo -E apt-get -qq install build-essential libncurses5-dev libssl-dev libelf-dev \
          bison flex git wget curl rsync unzip xz-utils zlib1g-dev python3 python3-distutils
        sudo timedatectl set-timezone "$TZ"
        echo "=== Disk space after environment init ==="
        df -hT / /tmp /workdir/tmp
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    # 缓存工具链（路径确保正确，匹配OpenWrt目录结构）
    - name: Cache toolchain & core libs
      uses: actions/cache@v3
      with:
        path: |
          /workdir/openwrt/staging_dir/toolchain-*
          /workdir/openwrt/staging_dir/target-*/usr/lib
        key: ${{ runner.os }}-openwrt-cache-${{ env.REPO_BRANCH }}-${{ hashFiles('.config', 'diy-*.sh') }}
        restore-keys: |
          ${{ runner.os }}-openwrt-cache-${{ env.REPO_BRANCH }}-
          ${{ runner.os }}-openwrt-cache-

    - name: Load custom feeds
      run: |
        [ -e "$FEEDS_CONF" ] && mv "$FEEDS_CONF" openwrt/feeds.conf.default
        chmod +x "$DIY_P1_SH"
        cd openwrt
        "$GITHUB_WORKSPACE/$DIY_P1_SH"

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -d "files" ] && mv "files" openwrt/files
        [ -e "$CONFIG_FILE" ] && mv "$CONFIG_FILE" openwrt/.config
        chmod +x "$DIY_P2_SH"
        cd openwrt
        "$GITHUB_WORKSPACE/$DIY_P2_SH"

    # 3. 修复：SSH条件判断冗余，使用fromJSON避免逻辑错误
    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: fromJSON(github.event.inputs.ssh || 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        # 4. 修复：find命令exec语法（{}和\;之间必须有空格，否则报错）
        make download -j8 2>&1 | tee download.log
        find dl -size -1024c -exec ls -l {} \;  # 此处{}和\;之间加空格
        find dl -size -1024c -exec rm -f {} \;   # 同上，修复语法
        # 5. 修复：替换make check-downloads（部分OpenWrt版本不支持），手动校验
        if ls dl/*.tar.* 2>/dev/null; then
          echo "All packages downloaded successfully"
        else
          echo "Error: Missing downloaded packages!" && exit 1
        fi

    - name: Pre-compile space check
      id: space_check
      run: |
        ROOT_FREE=$(df -m / | awk 'NR==2 {print $4}')
        REQUIRED_FREE=15360
        echo "Root directory free space: ${ROOT_FREE}MB (required: ${REQUIRED_FREE}MB)"
        if [ "$ROOT_FREE" -lt "$REQUIRED_FREE" ]; then
          echo "Warning: Insufficient space! Trying final cleanup..."
          sudo rm -rf /workdir/openwrt/dl/* 2>/dev/null
          ROOT_FREE_AFTER=$(df -m / | awk 'NR==2 {print $4}')
          echo "Free space after final cleanup: ${ROOT_FREE_AFTER}MB"
          if [ "$ROOT_FREE_AFTER" -lt "$REQUIRED_FREE" ]; then
            echo "Error: Still insufficient space! Abort compile."
            exit 1
          fi
        fi
        # 后台空间监控（确保PID正确赋值）
        echo "Start background space monitoring..."
        while true; do
          ROOT_FREE=$(df -m / | awk 'NR==2 {print $4}')
          if [ "$ROOT_FREE" -lt 10240 ]; then  # 10GB阈值
            echo "Low space! Cleaning dl directory..."
            sudo rm -rf /workdir/openwrt/dl/* 2>/dev/null
          fi
          sleep 30
        done &
        echo "SPACE_MONITOR_PID=$!" >> $GITHUB_ENV

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        # 线程数计算（适配内存，变量引用加引号避免空值）
        THREADS=$(( $(nproc) - 1 ))
        [ "$THREADS" -lt 1 ] && THREADS=1
        MEM_TOTAL=$(free -m | awk '/Mem:/ {print $2}')
        [ "$MEM_TOTAL" -lt 8192 ] && THREADS=1  # 小内存强制1线程
        echo -e "${THREADS} thread compile (optimized for space)"
        # 保存编译日志
        COMPILE_LOG="compile.log"
        make -j"$THREADS" 2>&1 | tee "$COMPILE_LOG" || (
          make clean && make -j1 2>&1 | tee -a "$COMPILE_LOG"
        ) || (
          make clean && make -j1 V=s 2>&1 | tee -a "$COMPILE_LOG"
        )
        # 状态判断（加引号避免返回值异常）
        if [ $? -eq 0 ]; then
          echo "status=success" >> $GITHUB_OUTPUT
          DEVICE=$(grep -m1 '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/')
          [ -n "$DEVICE" ] && echo "DEVICE_NAME=_${DEVICE}" >> $GITHUB_ENV || echo "DEVICE_NAME=_unknown" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "=== Disk space after compile failure ==="
          df -hT /
          exit 1
        fi
        # 终止后台监控（忽略进程不存在错误）
        kill -9 "${{ env.SPACE_MONITOR_PID }}" 2>/dev/null

    # 6. 修复：Artifact路径不支持花括号扩展，改为明确路径
    - name: Upload compile log (on failure)
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'failure' && !cancelled()
      with:
        name: compile-log-${{ env.FILE_DATE }}
        path:
          /workdir/openwrt/compile.log
          /workdir/openwrt/download.log
        retention-days: 3

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin
        retention-days: 3

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled() && steps.compile.outputs.status == 'success'
      run: |
        cd openwrt/bin/targets/*/*
        # 清理无用文件（含调试目录，忽略不存在的文件）
        rm -rf packages *.buildinfo *.manifest *.json *bl2.bin */debug 2>/dev/null
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}
        retention-days: 3

    - name: Upload firmware to cowtransfer
      id: cowtransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress "${FIRMWARE}" 2>&1 | tee cowtransfer.log
        echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
        echo "url=$(cat cowtransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT

    - name: Upload firmware to WeTransfer
      id: wetransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress "${FIRMWARE}" 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
        echo "url=$(cat wetransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled() && steps.compile.outputs.status == 'success'
      run: |
        # Commit哈希截取（已修复语法，确保正确）
        COMMIT_HASH=${{ github.sha[:8] }}
        RELEASE_TAG=$(date +"%Y.%m.%d-%H%M")-immortalwrt24.10-6.6${{ env.DEVICE_NAME }}-$COMMIT_HASH
        echo "release_tag=${RELEASE_TAG}" >> $GITHUB_OUTPUT
        # 发布说明（变量引用加引号）
        touch release.txt
        echo "cmcc_rax3000m-237大功率固件" >> release.txt
        echo "后台地址：192.168.6.1" >> release.txt
        echo "登录账号：root" >> release.txt
        echo "登录密码：无" >> release.txt
        echo "默认主题：Argon" >> release.txt
        echo "集成插件：aria2、openlist2、diskman、lucky、ksmb、hd-idle、autoreboot、mtwifi-cfg" >> release.txt
        echo "编译源码：${{ env.REPO_URL }}" >> release.txt
        echo "编译Commit：${{ github.sha }}（前8位：${COMMIT_HASH}）" >> release.txt
        echo "编译时间：$(date +"%Y-%m-%d %H:%M:%S %Z")" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 3
